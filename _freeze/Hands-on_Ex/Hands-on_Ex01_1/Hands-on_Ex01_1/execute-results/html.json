{
  "hash": "e544d7e9e2cb65674f331391f21a90c5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"01-1 Geospatial Data Science with R\"\nauthor: \"Yiqiong PAN\"\ndate: \"Aug 28, 2025\"\ndate-modified: \"last-modified\"\nformat: \n  html:\n    toc: true\n    toc-depth: 6\nexecute:\n  echo: true #display the code\n  eval: true \n  message: false\n  warning: false\n  freeze: true # not render if nothing edited\neditor: visual\n---\n\n**Notes from Week 1**\n\n**Representing Features on a Map**\n\n-   Buildings (HDB Complex)\n\n    Polygon:best for representing the footprint/shape.\n\n    Point (centroid):useful for labeling or when footprint detail is unnecessary.\n\n    Multipoint: ometimes used if a complex has multiple discrete buildings but you do not need exact footprints.\n\n-   Roads: represented as lines. PIE is best represented as a **MultiLineString with breaks** at exits/intersections\n\n-   Drop-off / POIs (e.g., PIE drop-off): often points.\n\n-   Southern Islands: multipolygon, since multiple land masses form one feature.\n\n**Geographic vs Projected Coordinate Systems**\n\nGeographic Coordinate System (GCS)\n\n-   Uses longitude/latitude (WGS84, EPSG:4326).\n\n-   Units: degrees (decimal or DMS).\n\n-   Good for locating positions.\n\n-   Not accurate for distance/area because the Earth is an ellipsoid.\n\n-   Example: 1° longitude at equator ≠ 1° longitude at 45°N/S or the pole (varies by location).\n\nProjected Coordinate System (PCS)\n\n-   “Flattens” Earth by projecting onto a plane.\n\n-   Units: metres or feet.\n\n-   Necessary for distance/area analytics.\n\n-   Many types of projections (equal-area, conformal, equidistant, etc.), each preserving different properties.\n\n-   Always transform data into PCS before spatial analysis.\n\n-   SVY21 (EPSG:3414) is Singapore’s gazetted PCS.\n\n**File Formats**\n\nSHP (ESRI Shapefile)\n\n-   Well-structured, comes with multiple associated files (.shp, .shx, .dbf, etc.).\n\n-   Contains both geometry and attribute tables.\n\n-   Preferred for robust data exchange.\n\nKML (Keyhole Markup Language)\n\n-   XML-based, can be opened in Notepad.\n\n-   Lightweight but less structured.\n\n-   Often used for sharing data via Google Earth/Maps.\n\nIn R (sf package)\n\n-   class(mpsz): returns sf, data.frame.\n\n-   Means it behaves like both a spatial object and a data frame.\n\n**Practical Notes**\n\n-   Different map versions may have different boundaries. Although R could sync to the versions by using precision classification, always use the latest version.\n\n-   Always reproject to PCS before measuring area/distance. (st_transform)\n\n-   Use SHP whenever possible for structured workflows and compatibility.\n\n## 1 Getting Started: Installing and Launching R Packages\n\nThe following code chunk uses the **p_load()** function from the pacman package to check whether the **sf** and **tidyverse** packages are installed. If they are, it loads them into the R session; if not, we could install them first via function **install.packages()** and then load them into R by using p_load().\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tidyverse)\n```\n:::\n\n\n## 2 Importing the Data\n\nThe geospatial datasets include **shapefiles** and **KML** file. (The reason of selecting file format). The geospatial data consist of the **Master Plan 2014 Subzone Boundary (Web)**, **Pre-Schools Location** from data.gov.sg, and **Cycling Path** from LTA DataMall. The aspatial dataset is the **Singapore Airbnb listings** from Inside Airbnb.\n\nR itself is **case-sensitive**, especially for object and function names. Whether file paths are case-sensitive depends on the operating system, e.g. On Windows: it is **not** **case-sensitive**.\n\n### 2.1 Importing Polygon Data Frame\n\nThe code below uses the **st_read()** function from the sf package to load the Master Plan 2014 Subzone Boundary (Web) shapefile as a **polygon** data frame. For shapefiles, the .shp extension does not need to be specified in the code. Both absolute and relative paths can be used, but a relative path is applied here to keep the code cleaner and shorter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"mp14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mp14_SUBZONE_WEB_PL' from data source \n  `C:\\lsrgc\\ISSS626-yiqiong-pan\\Hands-on_Ex\\Hands-on_Ex01_1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n### 2.2 Importing Polyline Data Frame\n\nSimilarly, the code below uses st_read() to import the Cycling Path shapefile as a **polyline** data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn = \"data/geospatial\",\n                      layer = \"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\lsrgc\\ISSS626-yiqiong-pan\\Hands-on_Ex\\Hands-on_Ex01_1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n### 2.3 Importing Point Data Frame\n\nThe code below uses st_read() to import the Pre-Schools Location in KML format as **point** feature data frame into R. When importing a KML file, the .kml extension must be **included**.\n\nsvy21 vs wgs84?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\lsrgc\\ISSS626-yiqiong-pan\\Hands-on_Ex\\Hands-on_Ex01_1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n## 3. Checking the Content of a Simple Feature Data Frame\n\nBoth **two** code chunks display the basic information about the dataset. However, it is more common to use the second approach.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$geom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n\n\n:::\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\nAlthough it is mentioned as one of the ways to retrieve the first 5 records like the two code chunks above, but here we see seems to be ID column?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180\n[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\n[199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216\n[217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234\n[235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252\n[253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270\n[271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288\n[289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306\n[307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323\n```\n\n\n:::\n:::\n\n\nFurthermore, the code below uses **glimpse()** of dplyr to display **more** detailed attribute information in the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\nLastly, the code below uses the **head()** function from base R (similar to Python, where the argument n can be set manually) to display the first few rows of the data frame for a quick overview.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n\n\n:::\n:::\n\n\n## 4. Plotting the Geo spatial Data\n\nVisualising an sf data frame is straightforward: using the **plot()** of Base R function automatically generates **small** **coloured** maps of the geometries by each attribute (field), while excluding non-informative columns such as the OBJECTID.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nMeanwhile, the code chunk below can be used to display the **silhouette** of the map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe can also focus on **a specific attribute** by using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nTo get a polished view of the data, we can use the **tmap** package, but it takes longer processing time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(tmap)\n#tm_shape(mpsz) +\n  #tm_fill(\"PLN_AREA_N\")+\n  #tm_borders()\n\n## comment out to save time\n```\n:::\n\n\nBelow we quickly plot the preschool and cyclingpath.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(preschool))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(st_geometry(cyclingpath))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n\nBelow we can plot the **cyclingpath** layer on the top of the **mpsz** layer by using **add argument**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(cyclingpath),\n     add = TRUE, col = \"Blue\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nWhen trying the code with preschool, the **preschool** points does **not** appear on the **subzone** map because the two layers use **different CRSs** (mpsz in SVY21 and preschool in WGS84), transformation of preschool into the same CRS as mpsz is required before plotting the aligned map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool),\n     add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## 5. Projection Transformation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(cyclingpath)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n:::\n\n\nThe above funtion **st_crs()** reveals that the layers of mpsz and cyclingpath are indeed in SVY21, but they are missing the correct EPSG code (3414). **Assigning** EPSG 3414 by using **st_set_crs() of sf** packages ensures the CRS is properly identified, as below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_set_crs(mpsz,3414)\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\nOn the other hand, the code below using **st_transform()** **reprojects** the preschool data from the WGS84 to **SVY21**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_transform(preschool,\n                          crs = 3414)\n```\n:::\n\n\nBy display the preview of preschool sf data, we can confirm its CRS is **SVY21** now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\nHere we could **align** both data together by setting **add** argument **TRUE**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## 6. Importing and Converting an Aspatial Data\n\n### 6.1 Importing CSV\n\nThe chunk below first uses **read_csv()** from readr to import listing.csv into R as a tibble data frame, and then applies **list() from base R** to preview the first 10 records, similar to **glimpse() of dplyr.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"data/aspatial/listings.csv\")\nlist(listings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 3,659 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 7 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 8 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n10 369141 5mins fr… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,649 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n```\n\n\n:::\n:::\n\n\n### 6.2 Preview of the Data\n\nThe code chunk below uses **st_as_sf()** **of sf package** to convert the listings data frame into a simple feature data frame. Specifically the coordinates are first defined in **WGS84 (EPSG:4326, longitude/latitude in degrees**) and then **reprojected** into Singapore’s **SVY21 system** (**EPSG:3414, X/Y in metres**).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>% #used to nest st_transform() \n  st_transform(crs = 3414)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,659\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 29…\n$ name                           <chr> \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 143, NA, 76, NA, NA, 85, NA, NA, 41, 79…\n$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 180, 180, 92,…\n$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 131, 17, 5, 60, 81,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.12, 0.14, 0.27, 0.13, 0.10, 0.80, 0.1…\n$ calculated_host_listings_count <dbl> 5, 5, 5, 58, 58, 7, 58, 58, 5, 7, 7, 1,…\n$ availability_365               <dbl> 90, 79, 90, 153, 153, 365, 153, 153, 36…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, \"S039…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…\n```\n\n\n:::\n:::\n\n\n**DIY:** the code chuck below plots listings_sf onto mpsz layer. The map looks better when ploting mpsz first and then listings_sf, because the polygons give context (the “base map”), and the points can be layered on top without being hidden. Thus better order is **polygons first, points later**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(listings_sf), add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(st_geometry(listings_sf))\n#plot(st_geometry(mpsz), add = TRUE)\n```\n:::\n\n\n## 7. Geoprocessing with SF Package\n\n### 7.1 Use case 1: Land Acquisition Analysis\n\nTask: compute the total land area to reserve for a 5-m corridor/shoulder on both sides of the cycling paths.\n\n***\\<- assignment** (always use this for storing values/importing data).*\n\n***= function arguments** (inside function calls).*\n\n**Solution:**\n\n**Step 1:** **st_buffer()** of sf package: 5-metre buffers of reserved land on both sides of existing cycling path.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# quick review of the geometry type\nst_geometry_type(cyclingpath, by_geometry = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] MULTILINESTRING\n18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# quick overview of the cycling path data\nglimpse(cyclingpath)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4,651\nColumns: 20\n$ PATH_TYPE  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ RD_CD      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ LVL_NUM    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ AGENCY_IMP <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ AGENCY_MAI <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PLANNING_A <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ GAZETTE_DA <date> 2023-04-18, 2023-04-18, 2023-04-18, 2023-04-18, 2023-04-18…\n$ LAUNCH_DAT <date> 2023-04-18, 2023-04-18, 2023-04-18, 2023-04-18, 2023-04-18…\n$ PATH_OWNER <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ MISC       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PKG_REF    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ SHAPE_LEN  <dbl> 18.732594, 94.469928, 9.169593, 51.320348, 29.886054, 38.38…\n$ RD_CD_DESC <chr> \"TAMPINES AVENUE 4\", \"PUNGGOL FIELD\", \"PUNGGOL FIELD\", \"PUN…\n$ PLANNING_1 <chr> \"TAMPINES\", \"PUNGGOL\", \"PUNGGOL\", \"PUNGGOL\", \"JURONG WEST\",…\n$ AGENCY_M_1 <chr> \"Land Transport Authority\", \"Land Transport Authority\", \"La…\n$ AGENCY_I_1 <chr> \"Land Transport Authority\", \"Land Transport Authority\", \"La…\n$ PATH_OWN_1 <chr> \"Land Transport Authority\", \"Land Transport Authority\", \"La…\n$ LVL_NUM_DE <chr> \"At-grade\", \"At-grade\", \"At-grade\", \"At-grade\", \"At-grade\",…\n$ PATH_TYPE_ <chr> \"Shared Path\", \"Shared Path\", \"Shared Path\", \"Shared Path\",…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((40128.23 ..., MULTILINEST…\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(\n  cyclingpath, dist=5, nQuadSegs = 30)\n\n#st_buffer()builds polygons at a fixed offset from a geometry.\n#cyclingpath is input, multilinestrings layer\n#dist=5, buffer distance in the layer's units. \n#Here CRS is SVY221 in metre, thus no transformation is required.\n#nQuadSegs = 30, higher the value, smoother the curve in the buffer around corners or ends.\n#stands for “number of line segments to use to approximate a quarter circle\".\n```\n:::\n\n\n**Step 2:** use **st_area()** to calculate each area of the buffers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n#st_area() returns area of each feature in the geometry column\n# units vector (m^2)\n#buffer_cycling$AREA adds a new attribute column AREA\n```\n:::\n\n\nAlternatively, code uses **tidyverse**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- buffer_cycling %>%\n  mutate(AREA = st_area(geometry))\n# mutate() of dplyr, just like the $AREA, creates a new column AREA\n#geometry is the sf geometry column; st_area(geometry) computes area for each row.\n```\n:::\n\n\n**Step 3:** **sum()** of Base R to add up all AREA values.\n\n***What if the areas are overlapped?***\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3561648 [m^2]\n```\n\n\n:::\n:::\n\n\n**Step 4:** **plotting** the buffer by a selected planning subzone: **Tampines West**\n\na.  **filter()** of dplyr package to select the subzone\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#quick overview of the mpsz\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz_selected <- mpsz %>%\n  filter(SUBZONE_N == \"TAMPINES WEST\")\n#quick overview of the newly selected subzone\nst_geometry(mpsz_selected)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 38199.84 ymin: 35355.22 xmax: 40642.12 ymax: 38054.52\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n\n```{.r .cell-code}\n#creating a plot for the subzone in general\nplot(st_geometry(mpsz_selected))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nb.  **st_intersection()** of sf package to clip clycing buffers within the subzone. Both layers are in the SVY21. However, since EPSG code is missing in buffer_cycling, we need to **assign** the code 3414 to it before performing intersection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# checking features of the two layers\nst_crs(buffer_cycling)$epsg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(buffer_cycling)$Name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SVY21\"\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(mpsz_selected)$epsg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3414\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(buffer_cycling)$Name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SVY21\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# EPSG assignment, or use 3414 as second parameter\nbuffer_cycling <- st_set_crs(buffer_cycling, st_crs(mpsz_selected))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling_selected <- st_intersection(\n  buffer_cycling, mpsz_selected)\n#st_intersection(x, y) returns a new sf object = overlapping parts of x and y\n```\n:::\n\n\nc.  **plot()** to create the plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(buffer_cycling_selected))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n**DONE!**\n\n### 7.2 Use Case 2: To determine the number of pre-schools by planning subzone\n\n**Solution**:\n\n**Step 1:** Use **st_intersects()** from the sf package to identify pre-schools located inside each subzone. Then, use the length() function from base R to calculate the number of pre-school points within each subzone. The function st_intersects() returns a **list** of intersections. While **length(**) returns only the total number of subzones, the **lengths()** function works on a list and returns a vector with the length of each element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#perform an overview of both data frames first\nglimpse(preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,290\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <POINT [m]> POINT Z (25089.46 31299.16 0), POINT Z (27189.07 327…\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\n#show the outputs individually\nst_intersects(mpsz, preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 323, where the\npredicate was `intersects'\nfirst 10 elements:\n 1: (empty)\n 2: 764, 1258, 1503, 1562, 1670, 2035\n 3: (empty)\n 4: 151, 748, 1140, 1844, 2209\n 5: 190, 1496, 1924\n 6: 237, 238, 260, 264, 283, 292, 391, 714, 949, 1494, ...\n 7: 766, 1088, 1254, 1867, 2021\n 8: 498\n 9: 363, 399, 642, 1696, 1734, 1757, 1915, 1941, 2142, 2232, ...\n 10: 1470\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(st_intersects(mpsz, preschool))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 323\n```\n\n\n:::\n\n```{.r .cell-code}\nlengths(st_intersects(mpsz, preschool))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]  0  6  0  5  3 13  5  1 11  1  4  2  0  1  6  0  0  0  0  4  0  1  0  5  4\n [26]  1  7  2 12  7  0  0  4  0  4 10  1  3  0  6  0  3  1  0  3  0  4  1  9  0\n [51]  1  4  1  2  4  0  2  1  2  0  3  0  2  6  1  0 13  3 14  1  4  9  1  5  0\n [76]  0  3 11  0  0  1  0  3  1  2  0  0  5  0  7  3  4  0  0  7  0  0  2  0  4\n[101] 10  0 14  0  3  2  2 29 18 21  0  0  5  5  0 10 23 22  7  2  1  0  0  0  6\n[126]  6  3  0  0  8  5  5  8  6  5  5 11  9  8  0  3  8  1  0  3 24  0  7 18 11\n[151] 10 28 13  4  0  6  6  0  2  8  6  0 40  4 21  0 36 14  4 16 11 13  5  7  9\n[176] 12 30  0  0 11 13 38 11  0  8 19  5  5 72  9  0  4 32  7  3  3  9  3 38 18\n[201]  0 15  0 12  4 11 23 16  0  7 21 19  8 20 15 26  6 23 13  6  0 13  5 12 10\n[226]  7  6  7  1  8 25  3  8  0  0 18 13 10 16  9  9 17  5  1  3 22  4 12  4  9\n[251]  3  0 17 10  4  0  0  9 16 27  0 16 22 16  0 13 23  0  2  0  0 33 20  0 22\n[276]  6  8  5  6  0  0 14 21 20  1  0 22  2  0 54 27  1 10  0  0 10  0  0  0 12\n[301]  0  0  1  0 20 19  9 12  2 15  0  0  0  1  0  0  3  0  0  4  1  0  0\n```\n\n\n:::\n\n```{.r .cell-code}\n#combine the two steps into one-line code\nmpsz$`PreSch Count` <- lengths(st_intersects(mpsz, preschool))\n\n#alternatively, using tidyverse way\nmpsz <- mpsz %>%\n  mutate(`PreSch Count`= lengths(st_intersects(mpsz,preschool)))\n```\n:::\n\n\nNote: **st_intersects()** is a **spatial** **predicate** that quickly checks **relationships** between features and returns indices (or a list) showing which features intersect, without creating new geometries. In contrast, **st_intersection()** performs a **full geometric overlay**, generating new sf features that represent the actual overlapping geometries and carrying attributes from both input layers, which is more computationally intensive.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# statistical summary for the new column\nsummary(mpsz$`PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n```\n\n\n:::\n\n```{.r .cell-code}\n#top_n() of dplyr package to see the sub zone with the most number of pre-school\ntop_n(mpsz, 1, `PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n```\n\n\n:::\n:::\n\n\n**Step 2:** The code chunk below uses **st_area()** from the sf package to calculate the area of each subzone, returning values in square metres because the CRS (SVY21) is in metres. Note that the **SHAPE_Area** field shown in the glimpse(mpsz) output is a precomputed attribute from the original dataset and may not be accurate for current analysis; we rely on st_area() instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$AREA <- mpsz %>%\n  st_area()\n\nsummary(mpsz$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   39438   628261  1229894  2420882  2106483 69748299 \n```\n\n\n:::\n:::\n\n\nThe code chunk below computes preschool density **per km2** ( 1km2 = 1,000,000m2). We convert to per km2 to make the numbers **comparable** and readable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  mutate(`PreSch Density` = `PreSch Count`/AREA * 1000000)\n\n#quick overview of the stats for the new column\nsummary(mpsz$`PreSch Density`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   5.154   6.449  10.908  35.602 \n```\n\n\n:::\n:::\n\n\n**Step 3: EDA using ggplot2**\n\na.  Use **hist() of R Graphics** to plot a histogram of the distribution of PreSch Density.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mpsz$`PreSch Density`)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nb.  use **ggplot2** functions to provide informative visualisation.\n\nb1. create a **histogram**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#initiates the ggplot using mpsz data fram, set x-axis\nggplot(data=mpsz,\n       aes(x = as.numeric(`PreSch Density`))) +\n  #adds a histogram layer, with bin numbers, colour and fill colour\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\") + \n  #adds labels such as title, subtitle, and for x, y axis\n  labs(title = \"Are pre-school evenly distrubted in Singapore?\",\n      subtitle = \"There are many planning subzones with a single pre-school, on the other hand,\\nthere are seven planning subzones with at least 30 or more pre-schools.\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nb2. create a **scatterplot** for PreSch Density and PreSch Count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#starts a ggplot with mpsz, and maps x to PreSch Density and y to PreSch Count.\n#Uses as.numeric() to drop units from PreSch Density and coerce it to plain numbers\nggplot(data=mpsz,\n       aes(y = `PreSch Count`,\n           x = as.numeric(`PreSch Density`))) +\n  #adds points and colours\n  geom_point(shape =21,\n             color =\"black\",\n             fill = \"lightblue\") +\n  #sets the range of data from 0 to 40.\n  xlim(0,40) +\n  ylim(0,40) + \n  #adds labels\n  labs(title =\"\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_1_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n## 8 Reference\n\nKam, T. S. Thematic Mapping and GeoVisualisation with R. R for Geospatial Data Science and Analytics. https://r4gdsa.netlify.app/chap01.html\n\n",
    "supporting": [
      "Hands-on_Ex01_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}