{
  "hash": "d5cb59c6be3a13a368f07262dadbd5e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"03: Spatio-Temporal Point Patterns Analysis\"\nauthor: \"Yiqiong PAN\"\ndate: \"Sep 08, 2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true #display the code\n  eval: true #run the code\n  message: false\n  warning: false\n  freeze: true # not render if nothing edited\neditor: visual\nformat: \n  html:\n    number-sections: true\n    number-depth: 4\n---\n\n## Overview\n\nA **spatio-temporal point process** is a random set of points, each showing when and where an event happens. Examples include disease cases, animal sightings, or natural disasters such as fires and earthquakes.\n\nAs more data is collected with both time and location, analysing spatio-temporal patterns has become more important. In recent years, several R packages have been developed for this purpose.\n\nThis exercise demonstrates how to apply the process through a case study of **forest fires** in Kepulauan Bangka Belitung, Indonesia, from 1 January to 31 December 2023.\n\n## Learning Outcome\n\nThe key questions we aim to address are:\n\n1.  Are forest fire locations in Kepulauan Bangka Belitung independent in space and time?\n\n2.  If not, in which areas and during which periods do the forest fires tend to cluster?\n\n## The Data\n\nFor this exercise, the two datasets used are as follows:\n\n1.  forestfires (CSV) contains forest fire locations detected by the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor, obtained from the [Fire Information for Resource Management System](https://firms.modaps.eosdis.nasa.gov/download/). Only records within Kepulauan Bangka Belitung are used.\n\n2.  [Kepulauan_Bangka_Belitung](https://id.wikipedia.org/wiki/Kepulauan_Bangka_Belitung) (Shapefile) contains sub-district ([kelurahan](https://en.wikipedia.org/wiki/Villages_of_Indonesia)) boundaries of Kepulauan Bangka Belitung, extracted from the national dataset available on the [Indonesia Geospatial Portal](https://www.indonesia-geospasial.com/2023/05/download-shapefile-batas-administrasi.html).\n\n## Installing and Loading the R Packages\n\nA total of **six** R packages will be used in this exercise.\n\n| Package | Discription |\n|------------------------------------|:-----------------------------------|\n| [sf](https://r-spatial.github.io/sf/) | Simple Features, a new R package which handles importing, managing, and processing vector-based geospatial data. |\n\n| [raster](https://rspatial.org/raster/) | Tools for reading, writing, and analyzing raster (gridded) spatial data in R |\n| [spatstat](https://spatstat.org/) | Provides useful functions for SPPA, including kcross, Lcross etc. |\n| [sparr](https://tilmandavies.github.io/sparr/index.html) | Functions for fixed/adaptive kernel density estimation and relative risk mapping via density ratios; also supports fixed-bandwidth space-time density and risk estimation with inference. |\n| [tmap](https://r-tmap.github.io/tmap/) | Creates cartographic quality static or interactive choropleth maps. |\n| [tidyverse](https://www.tidyverse.org/) |A collection of R packages for data import, cleaning, transformation, and visualization (e.g., readr, dplyr, tidyr, ggplot2). |\n\nAfter installation via `install.packages()`, we load them into R environment using the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman:: p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n```\n:::\n\n\n## Importing and Preparing Study Area\n\n:::{.panel-tabset}\n\n### Importing Study Area\n\nFirst the code chunk below imports study area into R environment.\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb <- st_read(dsn = \"data/rawdata\",\n               layer = \"Kepulauan_Bangka_Belitung\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\lsrgc\\ISSS626-yiqiong-pan\\Hands-on_Ex\\Hands-on_Ex03\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 297 features and 26 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb) +\n  tm_borders()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAfter checking the summary and plot, we merge all sub-districts into a single boundary and remove unnecessary Z coordinates. The dataset’s CRS is WGS 84 with units in degrees, which is not suitable for spatial analysis. Therefore, it is transformed into a projected CRS in metres, specifically EPSG:32748 (UTM Zone 48S, WGS 84), which is appropriate for Indonesia.\n\nThe R console message indicates that the Z/M coordinates were already dropped when applying st_union(). The st_zm() step is retained here for clarity and consistency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_sf <- kbb %>%\n  st_union() %>%  \n  st_zm(drop = TRUE, what = \"ZM\") %>%\n  st_transform(crs = 32748)\n\nkbb_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 512066.8 ymin: 9655398 xmax: 705559.4 ymax: 9834006\nProjected CRS: WGS 84 / UTM zone 48S\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(kbb_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_POLYGON\" \"sfc\"        \n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(kbb_sf) +\n  tm_borders()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(kbb_sf) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n### Converting to `owin` Object\n\nWe convert `kbb_sf`, an `sfc_POLYGON` boundary, to an `owin` object to represent the polygonal study area.`owin` objects are required for spatial point pattern analysis (SPPA) with the `spatstat` package and can be visualised using base R plotting functions. For mapping with `tmap`, however, the boundary should remain as an `sf` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_owin <- as.owin(kbb_sf)\n\nclass(kbb_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(kbb_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWindow: polygonal boundary\nsingle connected closed polygon with 47493 vertices\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533600000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(kbb_owin, main = \"Kepulauan Bangka Belitung — study window (owin)\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\n## Importing and Peparing Forest Fire Data\n\nWe first import `forestfires.csv` into R with `read_csv()`, which creates a regular `tibble` (non-spatial, no CRS). Next, we convert the longitude/latitude columns into an `sf` object by creating a geometry column of type `sfc_POINT` and assigning `EPSG:4326` (WGS 84). Finally, we reproject to a projected CRS in metres, `EPSG:32748` (UTM Zone 48S, WGS 84) for spatial analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_tbl <- read_csv(\"data/rawdata/forestfires.csv\")\nst_crs(fire_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n\n```{.r .cell-code}\nfire_sf <- fire_tbl %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 32748)\n\nst_crs(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            MEMBER[\"World Geodetic System 1984 (G2296)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf [741 × 14] (S3: sf/tbl_df/tbl/data.frame)\n $ brightness: num [1:741] 312 314 315 309 308 ...\n $ scan      : num [1:741] 1.3 1.2 1.2 1.2 1.2 1.3 1.2 1.2 2 2 ...\n $ track     : num [1:741] 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.4 1.4 ...\n $ acq_date  : Date[1:741], format: \"2023-01-10\" \"2023-01-10\" ...\n $ acq_time  : num [1:741] 629 629 629 629 629 629 629 629 616 616 ...\n $ satellite : chr [1:741] \"Aqua\" \"Aqua\" \"Aqua\" \"Aqua\" ...\n $ instrument: chr [1:741] \"MODIS\" \"MODIS\" \"MODIS\" \"MODIS\" ...\n $ confidence: num [1:741] 67 70 71 54 33 72 71 75 73 75 ...\n $ version   : num [1:741] 61 61 61 61 61 ...\n $ bright_t31: num [1:741] 282 286 288 284 286 ...\n $ frp       : num [1:741] 10.8 10.2 11.4 7.1 6.2 22.7 15.6 15.9 58.3 42.1 ...\n $ daynight  : chr [1:741] \"D\" \"D\" \"D\" \"D\" ...\n $ type      : num [1:741] 0 0 0 0 0 0 0 0 0 0 ...\n $ geometry  :sfc_POINT of length 741; first list element:  'XY' num [1:2] 606179 9703062\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:13] \"brightness\" \"scan\" \"track\" \"acq_date\" ...\n```\n\n\n:::\n:::\n\n\n\nThe code below converts the `acq_date` column from `Date` format into a `numeric` variable. This step is needed because a `ppp` object in `spatstat` only accepts numeric or character variables as marks, not Date objects. Therefore, functions from lubridate are used to create time-based variables and a 12-level ordered factor (Month_fac) for grouping and plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- fire_sf %>%\n  mutate (DayofYear = yday(acq_date)) %>%\n  mutate(Month_num = month(acq_date)) %>%\n  mutate(Month_fac = month(acq_date,\n                           label = TRUE,\n                           abbr = FALSE))\nstr(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf [741 × 17] (S3: sf/tbl_df/tbl/data.frame)\n $ brightness: num [1:741] 312 314 315 309 308 ...\n $ scan      : num [1:741] 1.3 1.2 1.2 1.2 1.2 1.3 1.2 1.2 2 2 ...\n $ track     : num [1:741] 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.4 1.4 ...\n $ acq_date  : Date[1:741], format: \"2023-01-10\" \"2023-01-10\" ...\n $ acq_time  : num [1:741] 629 629 629 629 629 629 629 629 616 616 ...\n $ satellite : chr [1:741] \"Aqua\" \"Aqua\" \"Aqua\" \"Aqua\" ...\n $ instrument: chr [1:741] \"MODIS\" \"MODIS\" \"MODIS\" \"MODIS\" ...\n $ confidence: num [1:741] 67 70 71 54 33 72 71 75 73 75 ...\n $ version   : num [1:741] 61 61 61 61 61 ...\n $ bright_t31: num [1:741] 282 286 288 284 286 ...\n $ frp       : num [1:741] 10.8 10.2 11.4 7.1 6.2 22.7 15.6 15.9 58.3 42.1 ...\n $ daynight  : chr [1:741] \"D\" \"D\" \"D\" \"D\" ...\n $ type      : num [1:741] 0 0 0 0 0 0 0 0 0 0 ...\n $ geometry  :sfc_POINT of length 741; first list element:  'XY' num [1:2] 606179 9703062\n $ DayofYear : num [1:741] 10 10 10 10 10 10 10 10 12 12 ...\n $ Month_num : num [1:741] 1 1 1 1 1 1 1 1 1 1 ...\n $ Month_fac : Ord.factor w/ 12 levels \"January\"<\"February\"<..: 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:16] \"brightness\" \"scan\" \"track\" \"acq_date\" ...\n```\n\n\n:::\n:::\n\n\n## Visualsing the Fire Points\n\n:::{.panel-tabset}\n### Overrall Plot\n\nThe code chunk below overlays the polygonal study area `kbb_sf` with the forest file points `fire_sf` using `tmap` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf) +\n  tm_polygons() +\ntm_shape(fire_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n### Visuaising by Month\n\nThe code chunk below produces a grid of maps, with one map for each month of 2023, to visualise the spatial distribution of forest fires. Each facet uses the same geographic frame, so that it is easy to obverse how fire patterns vary over time and space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf) +\n  tm_polygons() +\ntm_shape(fire_sf) +\n  tm_dots(size = 0.1) +\ntm_facets(by = \"Month_fac\", #split the map into multiple panels by month factors\n          free.coords = FALSE, # all panels share the same coordinate system / map extent.\n          drop.units = TRUE)  # drop if some months have no data,\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## Computing STKDE by Month\n\nIn this section, we use `spattemp.density()` to build spatio-temporal `ppp` (with x, y, time) from the `fire_sf` to show when and where forest files are more likely.\n\n- `pp`: spatio-temporal point pattern.\n\n- `h`: spatial bandwidth (how smooth in space).\n\n- `tt`: temporal bandwidth (how smooth in time).\n\n- `tlim`: time range to consider.\n\n-`sedge` / `tedge`: edge corrections for space / time.\n\n- `sres` / `tres`: resolution of spatial grid / temporal bins.\n\n\n## Computing STKDE by Day of Year\n\n\n## Computing STKE by Day of Year: Improved Method\n",
    "supporting": [
      "Hands-on_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}