{
  "hash": "1950ec02ed28d3299d9ac8331481bdc1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"03: Spatio-Temporal Point Patterns Analysis\"\nauthor: \"Yiqiong PAN\"\ndate: \"Sep 08, 2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true #display the code\n  eval: true #run the code\n  message: false\n  warning: false\n  freeze: true # not render if nothing edited\neditor: visual\nformat: \n  html:\n    number-sections: true\n    number-depth: 4\n---\n\n## Overview\n\nA **spatio-temporal point process** is a random set of points, each showing when and where an event happens. Examples include disease cases, animal sightings, or natural disasters such as fires and earthquakes.\n\nAs more data is collected with both time and location, analysing spatio-temporal patterns has become more important. In recent years, several R packages have been developed for this purpose.\n\nThis exercise demonstrates how to apply the process through a case study of **forest fires** in Kepulauan Bangka Belitung, Indonesia, from 1 January to 31 December 2023. Kepulauan Bangka Belitung is an Indonesian province of two main islands, Bangka and Belitung, plus smaller islets, known for tin mining, pepper cultivation, tropical beaches, and diverse cultural heritage.\n\n## Learning Outcome\n\nThe key questions we aim to address are:\n\n**1. Are forest fire locations in Kepulauan Bangka Belitung independent in space and time?**\n\n**2. If not, in which areas and during which periods do the forest fires tend to cluster?**\n\n## The Data\n\nFor this exercise, the two datasets used are as follows:\n\n1.  forestfires (CSV) contains forest fire locations detected by the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor, obtained from the [Fire Information for Resource Management System](https://firms.modaps.eosdis.nasa.gov/download/). Only records within Kepulauan Bangka Belitung are used.\n\n2.  [Kepulauan_Bangka_Belitung](https://id.wikipedia.org/wiki/Kepulauan_Bangka_Belitung) (Shapefile) contains sub-district ([kelurahan](https://en.wikipedia.org/wiki/Villages_of_Indonesia)) boundaries of Kepulauan Bangka Belitung, extracted from the national dataset available on the [Indonesia Geospatial Portal](https://www.indonesia-geospasial.com/2023/05/download-shapefile-batas-administrasi.html). The region's dry season is May-October and rainy season is October-April.\n\n## Installing and Loading the R Packages\n\nA total of **six** R packages will be used in this exercise.\n\n| Package | Description |\n|------------------------------------|------------------------------------|\n| [sf](https://r-spatial.github.io/sf/) | Simple Features, a new R package which handles importing, managing, and processing vector-based geospatial data. |\n| [raster](https://rspatial.org/raster/) | Tools for reading, writing, and analyzing raster (gridded) spatial data in R |\n| [spatstat](https://spatstat.org/) | Provides useful functions for SPPA, including kcross, Lcross etc. |\n| [sparr](https://tilmandavies.github.io/sparr/index.html) | Functions for fixed/adaptive kernel density estimation and relative risk mapping via density ratios; also supports fixed-bandwidth space-time density and risk estimation with inference. |\n| [tmap](https://r-tmap.github.io/tmap/) | Creates cartographic quality static or interactive choropleth maps. |\n| [tidyverse](https://www.tidyverse.org/) | A collection of R packages for data import, cleaning, transformation, and visualization (e.g., readr, dplyr, tidyr, ggplot2). |\n\n: {tbl-colwidths=\"\\[15,85\\]\"}\n\nAfter installation via `install.packages()`, we load them into R environment using the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman:: p_load(sf, raster, spatstat, sparr, tmap, tidyverse, stpp)\n```\n:::\n\n\n## Importing and Preparing Study Area\n\n::: panel-tabset\n### Importing Study Area\n\nFirst the code chunk below imports study area into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb <- st_read(dsn = \"data/rawdata\",\n               layer = \"Kepulauan_Bangka_Belitung\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\lsrgc\\ISSS626-yiqiong-pan\\Hands-on_Ex\\Hands-on_Ex03\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 297 features and 26 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb) +\n  tm_borders()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAfter checking the summary and plot, we merge all sub-districts into a single boundary and remove unnecessary Z coordinates. The dataset’s CRS is WGS 84 with units in degrees, which is not suitable for spatial analysis. Therefore, it is transformed into a projected CRS in metres, specifically EPSG:32748 (UTM Zone 48S, WGS 84), which is appropriate for Indonesia.\n\nThe R console message indicates that the Z/M coordinates were already dropped when applying st_union(). The st_zm() step is retained here for clarity and consistency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_sf <- kbb %>%\n  st_union() %>%  \n  st_zm(drop = TRUE, what = \"ZM\") %>%\n  st_transform(crs = 32748)\n\nkbb_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 512066.8 ymin: 9655398 xmax: 705559.4 ymax: 9834006\nProjected CRS: WGS 84 / UTM zone 48S\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(kbb_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_POLYGON\" \"sfc\"        \n```\n\n\n:::\n\n```{.r .cell-code}\nst_bbox(kbb_sf) #the bounding box confirms the location\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     xmin      ymin      xmax      ymax \n 512066.8 9655398.5  705559.4 9834006.0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# par(mfrow=c(1,2)) # base R plotting\nkbb_sf_plot1 <- tm_shape(kbb_sf) +\n  tm_borders() +\n  tm_title(\"Kepulauan Bangka Belitung 1\")\n\nkbb_sf_plot2 <- tm_shape(kbb_sf) +\n  tm_polygons() +\n  tm_title(\"Kepulauan Bangka Belitung 2\")\n\ntmap_arrange(kbb_sf_plot1, kbb_sf_plot2, asp = 1, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Converting to `owin` Object\n\nWe convert `kbb_sf`, an `sfc_POLYGON` boundary, to an `owin` object to represent the polygonal study area.\n\n`owin` objects are required for spatial point pattern analysis (SPPA) with the `spatstat` package and can be visualised using base R plotting functions. For mapping with `tmap`, however, the boundary should remain as an `sf` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_owin <- as.owin(kbb_sf)\n\nclass(kbb_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(kbb_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWindow: polygonal boundary\nsingle connected closed polygon with 47493 vertices\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533600000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(kbb_owin, main = \"Kepulauan Bangka Belitung — study window (owin)\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\n## Importing and Peparing Forest Fire Data\n\nWe first import `forestfires.csv` into R with `read_csv()`, which creates a regular `tibble` (non-spatial, no CRS). Next, we convert the longitude/latitude columns into an `sf` object by creating a geometry column of type `sfc_POINT` and assigning `EPSG:4326` (WGS 84). Finally, we reproject to a projected CRS in metres, `EPSG:32748` (UTM Zone 48S, WGS 84) for spatial analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_tbl <- read_csv(\"data/rawdata/forestfires.csv\")\nst_crs(fire_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n\n```{.r .cell-code}\nfire_sf <- fire_tbl %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 32748)\n\nst_crs(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32748 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48S\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            MEMBER[\"World Geodetic System 1984 (G2296)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48S\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 102°E and 108°E, southern hemisphere between 80°S and equator, onshore and offshore. Indonesia.\"],\n        BBOX[-80,102,0,108]],\n    ID[\"EPSG\",32748]]\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf [741 × 14] (S3: sf/tbl_df/tbl/data.frame)\n $ brightness: num [1:741] 312 314 315 309 308 ...\n $ scan      : num [1:741] 1.3 1.2 1.2 1.2 1.2 1.3 1.2 1.2 2 2 ...\n $ track     : num [1:741] 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.4 1.4 ...\n $ acq_date  : Date[1:741], format: \"2023-01-10\" \"2023-01-10\" ...\n $ acq_time  : num [1:741] 629 629 629 629 629 629 629 629 616 616 ...\n $ satellite : chr [1:741] \"Aqua\" \"Aqua\" \"Aqua\" \"Aqua\" ...\n $ instrument: chr [1:741] \"MODIS\" \"MODIS\" \"MODIS\" \"MODIS\" ...\n $ confidence: num [1:741] 67 70 71 54 33 72 71 75 73 75 ...\n $ version   : num [1:741] 61 61 61 61 61 ...\n $ bright_t31: num [1:741] 282 286 288 284 286 ...\n $ frp       : num [1:741] 10.8 10.2 11.4 7.1 6.2 22.7 15.6 15.9 58.3 42.1 ...\n $ daynight  : chr [1:741] \"D\" \"D\" \"D\" \"D\" ...\n $ type      : num [1:741] 0 0 0 0 0 0 0 0 0 0 ...\n $ geometry  :sfc_POINT of length 741; first list element:  'XY' num [1:2] 606179 9703062\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:13] \"brightness\" \"scan\" \"track\" \"acq_date\" ...\n```\n\n\n:::\n:::\n\n\nThe code below converts the `acq_date` column from `Date` format into a `numeric` variable. This step is needed because a `ppp` object in `spatstat` only accepts numeric or character variables as marks, not Date objects. Therefore, functions from lubridate are used to create time-based variables and a 12-level ordered factor (Month_fac) for grouping and plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- fire_sf %>%\n  mutate (DayofYear = yday(acq_date)) %>%\n  mutate(Month_num = month(acq_date)) %>%\n  mutate(Month_fac = month(acq_date,\n                           label = TRUE,\n                           abbr = FALSE))\nstr(fire_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf [741 × 17] (S3: sf/tbl_df/tbl/data.frame)\n $ brightness: num [1:741] 312 314 315 309 308 ...\n $ scan      : num [1:741] 1.3 1.2 1.2 1.2 1.2 1.3 1.2 1.2 2 2 ...\n $ track     : num [1:741] 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.1 1.4 1.4 ...\n $ acq_date  : Date[1:741], format: \"2023-01-10\" \"2023-01-10\" ...\n $ acq_time  : num [1:741] 629 629 629 629 629 629 629 629 616 616 ...\n $ satellite : chr [1:741] \"Aqua\" \"Aqua\" \"Aqua\" \"Aqua\" ...\n $ instrument: chr [1:741] \"MODIS\" \"MODIS\" \"MODIS\" \"MODIS\" ...\n $ confidence: num [1:741] 67 70 71 54 33 72 71 75 73 75 ...\n $ version   : num [1:741] 61 61 61 61 61 ...\n $ bright_t31: num [1:741] 282 286 288 284 286 ...\n $ frp       : num [1:741] 10.8 10.2 11.4 7.1 6.2 22.7 15.6 15.9 58.3 42.1 ...\n $ daynight  : chr [1:741] \"D\" \"D\" \"D\" \"D\" ...\n $ type      : num [1:741] 0 0 0 0 0 0 0 0 0 0 ...\n $ geometry  :sfc_POINT of length 741; first list element:  'XY' num [1:2] 606179 9703062\n $ DayofYear : num [1:741] 10 10 10 10 10 10 10 10 12 12 ...\n $ Month_num : num [1:741] 1 1 1 1 1 1 1 1 1 1 ...\n $ Month_fac : Ord.factor w/ 12 levels \"January\"<\"February\"<..: 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:16] \"brightness\" \"scan\" \"track\" \"acq_date\" ...\n```\n\n\n:::\n:::\n\n\n## Visualsing the Fire Points\n\n::: panel-tabset\n### Overrall Plot\n\nThe code chunk below overlays the polygonal study area `kbb_sf` with the forest file points `fire_sf` using `tmap` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf) +\n  tm_polygons() +\ntm_shape(fire_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Visuaising by Month\n\nThe code chunk below produces a grid of maps, with one map for each month of 2023, to visualise the spatial distribution of forest fires. Each facet uses the same geographic frame, so that it is easy to obverse how fire patterns vary over time and space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf) +\n  tm_polygons() +\ntm_shape(fire_sf) +\n  tm_dots(size = 0.1) +\ntm_facets(by = \"Month_fac\", #split the map into multiple panels by month factors\n          free.coords = FALSE, # all panels share the same coordinate system / map extent.\n          drop.units = TRUE)  # drop if some months have no data,\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n:::\n\n## Computing STKDE by Month\n\nIn this section, we use `spattemp.density()` to build spatio-temporal `ppp` (with x, y, time) from the `fire_sf` to show when and where forest fires are more likely.\n\n-   `pp`: spatio-temporal point pattern.\n\n-   `h`: spatial bandwidth (how smooth in space).\n\n-   `tt`: temporal bandwidth (how smooth in time).\n\n-   `tlim`: time range to consider.\n\n-   `sedge` / `tedge`: edge corrections for space / time.\n\n-   `sres` / `tres`: resolution of spatial grid / temporal bins.\n\n::: panel-tabset\n### A Extracting `Month_num` field\n\nSince `as.ppp()` from spatstat only needs a mark field (e.g numeric field Month_num) and the geometry, this step ensures the data frame is reduced to just what is necessary.\n\nAs mentioned above, in `spatstat`, the marks of a `ppp` object could be:\n\n-   numeric mark,quantitative values, which is used for intensity or regression analysis\n-   character marks, converted to `factor`, which are then used for for categorical analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month <- fire_sf %>%\n  select(Month_num)\n\nstr(fire_month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf [741 × 2] (S3: sf/tbl_df/tbl/data.frame)\n $ Month_num: num [1:741] 1 1 1 1 1 1 1 1 1 1 ...\n $ geometry :sfc_POINT of length 741; first list element:  'XY' num [1:2] 606179 9703062\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA\n  ..- attr(*, \"names\")= chr \"Month_num\"\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(fire_month)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### B Creating `ppp`\n\nThe code chunk below converts sf data frame to `ppp` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_ppp <- as.ppp(fire_month)\nfire_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n```\n\n\n:::\n:::\n\n\nThe code chunk below check the summary statistics including object class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fire_month_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n```\n\n\n:::\n:::\n\n\nThe code chunk below performs a quick sanity check to ensure there are no duplicate points, which could avoid biased results or errors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(fire_month_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nThe code chunk below draws the points for a quick look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fire_month_ppp)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### C Adding `owin` Object\n\n`ppp[owin]` in `spatstat` clips the point pattern to a given window. That means only points of e.g. `fire_month_ppp` that fall in the study area `kbb_owin` are kept and outputs a new `ppp` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_owin <- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.42469e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 47493 vertices\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533600000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(fire_month_owin)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### D computing Spatio-temporal KDE\n\nThe code chunk below calculate the STKDE using `spattemp.density()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(fire_month_owin)\n\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"stden\"\n```\n\n\n:::\n:::\n\n\n### E Ploting the STKDE Ojbect\n\nThe class of `st_kde` is `stden` which stores a stack of KDE surfaces, one for each time slice. Using `plot(st_kde)` alone, plots 12 monthly KDE. The code chunk below first creates a list for then plots 6 KDE maps between July 23 and December 23 in a 2 \\* 3 grid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(7:12)\npar(mfcol = c(2,3))\nfor (i in tims){\n  plot(st_kde, i, override.par= FALSE,\n       fix.range= TRUE,\n       main = paste(\"KDE at month\", i))\n}\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-17-1.png){width=1152}\n:::\n:::\n\n\nHere we quickly plot the monthly KDE. The `fix.range = TRUE` argument is important: without a common colour scale, months with few events are exaggerated and low-activity months can look quite intense.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(4,3))\nplot(st_kde, override.par = FALSE, fix.range = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-18-1.png){width=1152}\n:::\n:::\n\n:::\n\n## Computing STKDE by Day of Year\n\n::: panel-tabset\nAfter conducting the STKDE by month, we proceed to perform the STKDE by day.\n\n### A Creating `ppp` Object\n\nSimilar to the steps for computing STKDE by month, the code chunk below selects numeric mark `DayofYear` and coverts the `sf` object to a `ppp` object using the piper operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_yday_ppp <- fire_sf %>%\n  select(DayofYear) %>%\n  as.ppp()\n\nsummary(fire_yday_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(fire_yday_ppp)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### B Adding `owin` Ojbect\n\nThe code chunk below restricts the point events to observation window, runs a few sanity checks, such as `summary()` and `duplicated()`, and plotz the new `ppp` object for a quick review.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_yday_owin <- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.42469e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 47493 vertices\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533600000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(fire_yday_owin))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(fire_yday_owin)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### C Computing STKDE\n\nThe code chunk below perform the STKDE using `spattemp.density`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_day <- spattemp.density(\n  fire_yday_owin)\n\nsummary(kde_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(kde_day $tgrid) #check the number of temporal slices\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 343\n```\n\n\n:::\n:::\n\n\n### D Visualising STKDE in gif\n\nIf we plot `kde_day` directly it will produce 343 KDE maps ( one per day), which is too many to view at once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(kde_day)\n```\n:::\n\n\nHere we install the `magick` package and animate the `kde_day` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(magick)\n\n# pick all days, or thin with step=7 for weekly\nsel <- seq_along(kde_day$tgrid)   # all 343 days\n# sel <- seq(1, length(kde_day$tgrid), by = 7)  # weekly thinning\n\nframes <- lapply(sel, function(i) {\n  tsel <- kde_day$tgrid[i]\n  img  <- image_graph(width = 800, height = 700, res = 96) # open a plot device\n\n  plot(kde_day, tselect = tsel, override.par = TRUE, fix.range = TRUE,\n       main = paste(\"STKDE – Day\", tsel))\n\n  dev.off()\n  img\n})\n\n# combine frames into gif\nanim <- image_animate(image_join(frames), delay = 20, loop = 0)\n\n\n# save to file\nimage_write(anim, \"stkde_day.gif\")\n```\n:::\n\n\nPlease see the comparison in summary.\n:::\n\n## Computing STKE by Day of Year: Improved Method\n\nIn this section, we use `BOOT.spattemp()` from `sparr` package to select optimal bandwidths for spatio-temporal kernel density estimation. The function use bootstrap estimation of Mean Integrated Squared Error (MISE) to product an isotropic scalar spatial bandwidth (h) and a scalar temporal bandwidth (lambda).\n\n::: panel-tabset\n### A Computing STKDE\n\nWhen using plug-in rule in `spattemp.density()`, the spatio-temporal bandwidths are 15km and 6.3 days.\n\nThe code chunk below applies `boot.spattemp()` generated optimal bandwidths 9km and 19 day to STKDE computation.\n\nWe shall get a clear view of fire seasonality and hotspots than the default bandwidths.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nBOOT.spattemp(fire_yday_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInitialising...Done.\nOptimising...\nh = 15102.47 \b; lambda = 16.84806 \nh = 16612.72 \b; lambda = 16.84806 \nh = 15102.47 \b; lambda = 1527.095 \nh = 15480.03 \b; lambda = 771.9715 \nh = 15668.81 \b; lambda = 394.4098 \nh = 15763.2 \b; lambda = 205.6289 \nh = 15810.4 \b; lambda = 111.2385 \nh = 15833.99 \b; lambda = 64.04328 \nh = 15845.79 \b; lambda = 40.44567 \nh = 15851.69 \b; lambda = 28.64687 \nh = 15863.49 \b; lambda = 5.049258 \nh = 15854.64 \b; lambda = 22.74746 \nh = 15860.54 \b; lambda = 10.94866 \nh = 15859.07 \b; lambda = 13.89836 \nh = 14348.82 \b; lambda = 13.89836 \nh = 13216.87 \b; lambda = 12.42351 \nh = 12460.27 \b; lambda = 15.37321 \nh = 10760.88 \b; lambda = 16.11064 \nh = 8875.282 \b; lambda = 11.68608 \nh = 10432.08 \b; lambda = 12.97658 \nh = 7976.084 \b; lambda = 16.66371 \nh = 9286.281 \b; lambda = 15.60366 \nh = 9615.08 \b; lambda = 18.73771 \nh = 9206.581 \b; lambda = 21.61828 \nh = 8140.483 \b; lambda = 18.23073 \nh = 8795.582 \b; lambda = 17.70071 \nh = 9124.381 \b; lambda = 20.83477 \nh = 9164.856 \b; lambda = 19.52699 \nh = 8345.358 \b; lambda = 18.48998 \nh = 9297.65 \b; lambda = 18.67578 \nh = 8928.375 \b; lambda = 16.8495 \nh = 9105.736 \b; lambda = 18.85762 \nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         h     lambda \n9105.73611   18.85762 \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_yday_boot <- spattemp.density(fire_yday_owin,\n                                  h = 9000,\n                                  lambda = 19)\nsummary(kde_yday_boot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 9000 (spatial)\n  lambda = 19 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [2.001642e-19, 2.445724e-12]\n```\n\n\n:::\n:::\n\n\n### B Plotting STKDE in `gif` Format\n\nHere we create animated STKDE using `magick` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(kde_yday_boot)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pick all days, or thin with step=7 for weekly\nsel <- seq_along(kde_yday_boot$tgrid)   # all 343 days\n# sel <- seq(1, length(kde_day$tgrid), by = 7)  # weekly thinning\n\nframes <- lapply(sel, function(i) {\n  tsel <- kde_yday_boot$tgrid[i]\n  img  <- image_graph(width = 800, height = 700, res = 96) # open a plot device\n\n  plot(kde_yday_boot, tselect = tsel, override.par = TRUE, fix.range = TRUE,\n       main = paste(\"STKDE – Day\", tsel))\n\n  dev.off()\n  img\n})\n\n# combine frames into gif\nanim_bt <- image_animate(image_join(frames), delay =  20, loop = 0)\n\n# save to file\nimage_write(anim, \"stkde_day_bt.gif\")\n```\n:::\n\n\nPlease see the comparison in summary.\n:::\n\n## Summary\n\nHere we provide some preliminary answers to the two questions introduced at the start of this exercise.\n\n**1. Are fires independent in space and time?**\n\n-   No. The daily marks show spatial intensity and temporal seasonality, concentrated around Day 200–320.\n\n**2. Where and when do they cluster?**\n\n-   When: During the late dry season **Aug–Oct**, peaking around mid-Sep.\n\n-   Where: Activity begins in the **north-west**, intensifies in the **south**, and persists into the **south-east**.\n\nThe animated maps below compare STKDE using default bandwidths (left) versus bandwidths selected via bootstrap resampling (right).\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![STKDE Default](fig/stkde_day.gif){fig-align='center'}\n:::\n\n::: {.cell-output-display}\n![STKDE BOOT](fig/stkde_day_bt.gif){fig-align='center'}\n:::\n:::\n\n\n## Spatio-temporal Point Patterns Analysis: stpp methods\n\nHere we try out the second order ST-SPPA under stpp methods. \n\n###Preparing spatio-temporal point process object of stpp\n\n1. Extract fire event coordinates\n2. Construct a data frame with x, y, and an integer time index t\n3. Generate a spatio-temporal object by passing the matrix of x, y, t into as.3dpoints().\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(fire_sf)\nfire_df <- data.frame(\n  x = coords[, 1],  \n  y = coords[, 2],\n  t = fire_sf$`DayofYear`)\nfire_stpp <- as.3dpoints(fire_df)\nclass(fire_stpp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"stpp\"\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(fire_stpp)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### Computing spatio-temporal k-function\n\nSTIKhat() of stpp package is used to compute space-time inhomogeneous K-function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_stik <- STIKhat(fire_stpp)\nplotK(kbb_stik)\n```\n:::\n\n\n\n### Intepration Rule\n\n- High contour values at small spatial (uu) and temporal (vv) distances:\nstrong clustering (events occur close together in space and time).\n\n- Flat or low contour values :random distribution or weak clustering.\n\n- Shape of contours across axes:\nshows the extent of clustering: rapid changes indicate strong clustering over specific distances.\n\nIn this plot, the contours are widely spaced and rise gradually, which suggests weaker clustering: events are more spread out and do not strongly cluster at short distances.\n\n## Reference\n\nKam, T. S. 6 Spatio-Temporal Point Patterns Analysis. R for Geospatial Data Science and Analytics. https://r4gdsa.netlify.app/chap06\n",
    "supporting": [
      "Hands-on_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}