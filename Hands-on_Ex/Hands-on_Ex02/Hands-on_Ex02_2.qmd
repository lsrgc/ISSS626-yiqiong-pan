---
title: "02-2: 2nd Order Spatial Point Patterns Analysis Methods"
author: "Yiqiong PAN"
date: "Sep 04, 2025"
date-modified: "last-modified"
execute:
  echo: true #display the code
  eval: true #run the code
  message: false
  warning: false
  freeze: true # not render if nothing edited
editor: visual
format: 
  html:
    toc: true
    toc-depth: 6
    number-sections: true
    number-depth: 4
---

## Overview

This exercise uses **second-order spatial point pattern analysis** and `spatstat` package to study childcare centres in Singapore. Unlike first-order analysis, which looks only at overall density independently, second-order methods reveal relationships and influences between centres (points) based on distance.

We aim to answer two key questions:

1.  Are childcare centres randomly distributed across Singapore?

2.  If not, where are the areas with higher concentrations?

## The data

As also used in 1st order SPPA, the following datasets were downloaded from publicly available websites, and both are available in KML and GeoJSON format.

| Dataset Name | Source | Discrption |
|------------------------|------------------------|------------------------|
| Child Care Services | [data.gov.sg](data.gov.sg) | **Point feature data**: contains the locations and attributes of childcare centres. |
| Master plan 2019 Subzone Boundary (No Sea) | [singstat](https://www.singstat.gov.sg/) | **Polygon feature data**: represents the URA 2019 Master Plan planning subzone boundaries. |

## Installing and Loading the R packages

In addition to *spatstat*, a total of five R packages will be used in this exercise.

| Package | Discription |
|------------------------------------|:-----------------------------------|
| [sf](https://r-spatial.github.io/sf/) | Simple Features, a new R package which handles importing, managing, and processing vector-based geospatial data. |
| [spatstat](https://spatstat.org/) | Provides useful functions for SPPA, which will be called to conduct both 1st and 2nd SPPA and KDE. |
| [tmap](https://cran.r-project.org/web/packages/tmap/index.html) | Creates high quality static or interactive choropleth maps via [leaflet](https://leafletjs.com/). |
| [rvest](https://rvest.tidyverse.org/) | Scrapes and extracts data from web pages. |

After installation, we load them into R environment using the code below.

```{r}
pacman:: p_load(sf, spatstat, tmap, rvest, tidyverse)
```

## Data Import and Preparation

### importing data

:::: panel-tabset
#### Importing Master plan 2019 Subzone Boundary (No Sea) Polygon Data

The following code chunk shows the steps to first import the `Master plan 2019 Subzone Boundary (No Sea)` data using st_read, extract the required 4 columns from the `Description` field, filter out the nearby islands, and finally save the file as `mpsz_cl` for further analysis.

```{r}
mpsz_sf <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml") %>%
  st_zm(drop = TRUE, what = "ZM") %>%
  st_transform(crs = 3414)
```

```{r}
extract_kml_field <- function(html_text, field_name) {
  if (is.na(html_text) || html_text == "") return(NA_character_)
  
  page <- read_html(html_text)
  rows <- page %>% html_elements("tr")
  
  value <- rows %>%
    keep(~ html_text2(html_element(.x, "th")) == field_name) %>%
    html_element("td") %>%
    html_text2()
  
  if (length(value) == 0) NA_character_ else value
}
```

```{r}
# map_chr of purr (tidyverse) applies a function to each element of a list/vector and returns a character vector.
mpsz_sf <- mpsz_sf %>%
  mutate(
    REGION_N = map_chr(Description, extract_kml_field, "REGION_N"),
    PLN_AREA_N = map_chr(Description, extract_kml_field, "PLN_AREA_N"),
    SUBZONE_N = map_chr(Description, extract_kml_field, "SUBZONE_N"),
    SUBZONE_C = map_chr(Description, extract_kml_field, "SUBZONE_C")
  ) %>%
  select(-Name, -Description) %>%
  relocate(geometry, .after = last_col())
```

```{r}
mpsz_cl <- mpsz_sf %>%
  filter(SUBZONE_N != "SOUTHERN GROUP",
         PLN_AREA_N != "WESTERN ISLANDS",
         PLN_AREA_N != "NORTH-EASTERN ISLANDS")
```

```{r}
write_rds(mpsz_cl,
          "data/mpsz_cl.rds")
```

#### Importing Child Care Services Point Data

The code chuck below imports downloaded `ChildCareServices` data to R as sf data frame as `childcare_sf` by using st_read, coverts 3d to 2d (st_zm) and finally transform the CRS from WGS84 to SVY21.

```{r}
childcare_sf <- st_read("data/ChildCareServices.geojson") %>%
  st_zm(drop = TRUE, what = "ZM") %>% # Drop Z and M to convert from multi-dimensional to 2d (XY)
  st_transform(crs = 3414)

```

#### Mapping the Geospatial Data Sets

Using the tmap mapping methods, the code chunk below creates a map combining `childcare_sf` and `mpsz_cl`.

```{r}
tm_shape(mpsz_cl)+
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots(size = 0.3)
```

Alternatively, an interactive thematic map can be plotted using the code below. The interactive map is easy to navigate and query intuitively. It is optional to change the background map layer(choices: ESRI.WorldGrayCanvas(default), OpenStreetMap, ESRI.WorldTopoMap).

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_dots() #creates a layer of dots to visualise point data on a map.
```

```{r}
tmap_mode('plot') #switch back static maps
```

::: callout-warning
It is advised to always switch back to plot mode to save connection consumption and limit the number of interactive maps to 10 in one documents when publishing.
:::
::::

### Geospatial Data Wrangling

In this section, the data (sf objects) will be converted to spatstat data structure: **ppp** (for point data) and **owin** for observation window.

::: panel-tabset
#### A Converting sf Data Frames to PPP

Here we use `as.ppp()` of spatstat package to covert the point data `childcare_sf` to ppp file, confirm the change using `class()` and have a quick overview of the data statistics via `summary()`.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
class(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

```{r}
plot(unmark(childcare_ppp), main = "childcare_ppp") #drops the marks, since simple plot() is not displaying properly showing broken tags <th>, <td>, <table> etc
```

Before moving forwards, let's check if there are any duplicated points.

```{r}
any(duplicated(childcare_ppp))
```

#### B Creating Owin Object

Similarly, the owin object can be created using the function as.owin() for polygon data. After the conversion, the class() and plot() functions can be used to verify that the object is of the correct class and that the data retains its original shape.

```{r}
sg_owin <- as.owin(mpsz_cl)
class(sg_owin)
plot(sg_owin)
```

#### C Combining Point Events object and Owin Object

The code chunk below combines ppp and owin into one ppp file which means it updates the window of childcare_ppp to sg_owin and keeps the points that fall inside.

```{r}
childcareSG_PPP = childcare_ppp[sg_owin]
class(childcareSG_PPP)
childcareSG_PPP
```

```{r}
summary(childcareSG_PPP)
plot(unmark(childcareSG_PPP), main = "childcare_SG_PPP")
```
:::

### Extracting the Study Area

We focus on the childcare centres in the four areas: Punggol, Tampines, Choa Chu Kang and Jurong West.

::: panel-tabset
#### A Filtering

The code chunk uses filter() to create a new variable for each area and plot() for quick preview.

```{r}
pg <- mpsz_cl %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_cl %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_cl %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_cl %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

#### B Plotting the area

```{r, fig.width=16, fig.height=12}
par(mfrow=c(2,2))
plot(st_geometry(pg), main = "Ponggol")
plot(st_geometry(tm), main = "Tampines")
plot(st_geometry(ck), main = "Choa Chu Kang")
plot(st_geometry(jw), main = "Jurong West")
```

#### C Creating owin Object Using `as.owin()` (subzone window)

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### D Combining point event Object (whole) and owin object (subzone)

The code chunk below subsets the dataset to the study areas, rescales the unit of measurement from metre to kilometre and finally plot the areas with childcare points.

```{r}
childcare_pg_ppp = childcare_ppp[pg_owin] #crop childcare points to Punggol
childcare_tm_ppp = childcare_ppp[tm_owin]
childcare_ck_ppp = childcare_ppp[ck_owin]
childcare_jw_ppp = childcare_ppp[jw_owin]
```

#### E Plotting the subzone childcare ppp

```{r, fig.width=16, fig.height=12}
par(mfrow=c(2,2))
plot(unmark(childcare_pg_ppp),
  main = "Punggol")
plot(unmark(childcare_tm_ppp),
  main = "Tampines")
plot(unmark(childcare_ck_ppp),
  main = "Choa Chu Kang")
plot(unmark(childcare_jw_ppp),
  main = "Jurong West")
```
:::

## Second-order Spatial Point Patterns Analysis

Let us examine the relationships between points at subzone level.

| Function | Description | Interpretation |
|-----------------|-------------------------|------------------------------|
| Gest() | Nearest-neighbour CDF | Above band: Clustering; Below: Regular; Best for very small r. |
| Fest() | Empty-space CDF | Above band: Regular; Below: Clustering (coverage gaps) |
| Kest() | Cumulative neighbours within distance per unit intensity) | Above band: Clustering; Below: Regular |
| Lest() | Normalised K | Above band: Clustering; Below: Regular |

## Analysing Spatial Point Process Using G-Function

The G-function `Gest()` Nearest-neighbour CDF. Itâ€™s the proportion of points whose nearest neighbour is within distance r (a distribution, not a count). With Monte Carlo simulation `envelop()`, we test against complete spatial randomness (CSR).

First we set a fixed random seed to ensure reproducibility.

```{r}
set.seed(1234)
```

::: panel-tabset
### G- Function - CKK

The code chunk below calculates the G-function.

**The plot shows childcare centres are clustered within 300 metres but rather random beyond the scale.**

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border") #correction is border
G_CK
plot(G_CK,xlim= c(0,500)) #xlim zooms the x-axis, CDF rises above csr before 300 and crosses after 300
```

### G-Function with CSR - CCK

The code chunk below test Complete Spatial Randomness.

H0 = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

Since the number of simulations is 999, for two-sided test, `nrank` = (`nsim` + 1) \* 0.002 /2

`nrank` is 1 at default. This is also applicable to the following tests.

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim= 999)
G_CK.csr
```

```{r}
plot(G_CK.csr, xlim= c(0,300))
```

**Interpretation**: The G-function for Choa Chu Kang (KM correction; 999 CSR simulations; two-sided Î± = 0.002) shows small significant short-range clustering for distances below 100 m. From 100 to 220 m, curve hovers near the upper edge but stays inside, that indicates a tendency toward clustering but not statistically significant.

In Choa Chu Kang, centres are significantly more clustered than random within about 100 m. Between 100 and 220 m, the pattern looks random. Overall the centres are mostly **randomly distributed** with tendency to clustering.

### G-function - Tampines

The code chunk below calculates the G-function.

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best") #correction is selected by package
G_tm
plot(G_tm, xlim = c(0,300)) #xlim changes the scale
```

### G-function with CSR - Tampines

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

Since the number of simulations is 999, for two-sided test, `nrank` = (`nsim` + 1) \* 0.002 /2

`nrank` is 1 at default. This is also applicable to the following tests.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, Correction = "all", nsim = 999)
G_tm.csr
```

```{r}
plot(G_tm.csr, xlim = c(0,300))
```

**Interpretation**: The plot of Monte Carlo simulations (999 CSR sims, KM correction, two sided, 99.8% confidence) show the observed G in Tampines is mostly above the significance band, which implies centres **concentrate** within recommended range 258m, especially packed within first **60m**.
:::

## Analysing Spatial Point Process Using F-Function

The F-function `Fest()` estimates the distribution of empty-space distances, which means the distance from a random location to the nearest event. It tells about the gaps. Additionally Monte Carlo envelopes are used to assess complete spatial randomness.

::: panel-tabset
### F-function for CCK

```{r}
F_CK = Fest(childcare_ck_ppp, correction = "best")
F_CK
plot(F_CK, xlim= c(0,500))
```

### F-function with CSR -CCK

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
F_CK.csr
```

```{r}
plot(F_CK.csr, xlim=c(0,500))
```

**Interpretation**: Choa Chu Kang: F-function (KM correction; 999 CSR simulations; pointwise 99.8% envelope, Î± = 0.002):

The observed curve lies below the CSR line but remains inside the envelope across the recommended range (0,304m), which indicates **no** statistically significant departure from CSR. Overall, the centres are broadly consistent with a random (CSR) pattern, with only a mild tendency toward larger empty-space distances.

### F-function - Tampines

The code chunk below calculates the F-function.

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
F_tm
```

```{r}
plot(F_tm)
```

### F-function with CSR - Tampines

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
F_tm.csr = envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
F_tm.csr
```

```{r}
plot(F_tm.csr)
```

**Interpretation**: Tampines: The F-function (KM; 999 CSR sims; pointwise Î± = 0.002):

From 250m onward, the observed F curve drops below the lower envelope (pointwise a = 0.002) which means it is highly likely there are large caps from any centre over 250m. Together with the G-function evidence of significant short-range clustering, the results suggest a clusterâ€“hole pattern: centres concentrate around a few hotspots, leaving larger under-covered areas farther from any centre.
:::

## Analysing Spatial Point Process Using K-Function

K-function measures cumulative neighbours. It uses all neighbours within distance r of a typical point (expected count divided by intensity). Similarly here we first compute the K-function estimates using `Kest()` then test the K-function against CSR.

::: panel-tabset
### K-function - CCK

The code chunk below calculates the K-function.

```{r}
K_CK = Kest(childcare_ck_ppp, correction = "Ripley")
K_CK
plot(K_CK, .-r ~ r, ylab = "K(d) - r", xlab = "d(m)") #plot (each y-series minus r) against r.
```

### K-function with CSR - CCK

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
K_CK.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99)
K_CK.csr
plot(K_CK.csr, . -r ~ r, xlab = "d", ylab = "K(d) - r") #plot (each y-series minus r) against r.
```

**Interpretation**: Choa Chu Kang: K-function,isotropic edge correction; 99 CSR simulations; pointwise Î± = 0.02 The black curve remains close within the envelope over 0 to 500 m, so we do not detect a significant departure from CSR; from 500m to 800m, we find the slight positive deviation. Overall it suggests only a weak, non-significant clustering tendency.

### K-function - Tampines

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)",  #plot (each y-series minus r) against r.
     xlim=c(0,1000))
```

### K-function with CSR - Tampines

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1)
K_tm.csr
```

```{r}
plot(K_tm.csr, .- r~ r, xlab = "d", ylab = "K(d) - r", xlim = c(0, 1700)) #plot (each y-series minus r) against r.
```

**Interpretation**: Tampines: K-function,isotropic edge correction; 99 CSR simulations; pointwise Î± = 0.02

The black curve rises above the envelope over 0 to 1665 m, which shows a significant departure from CSR. K suggests **clustering** across many scales,
:::

## Analysing Spatial Point Process Using L-Function

Here we use K function- normalised version L-function `Lest()` and test against CSR `envelope()`.

::: panel-tabset
### L-function - CCK

The code chunk below calculates the L-function.

```{r}
L_CK = Lest(childcare_ck_ppp, correction = "Ripley")
L_CK
plot(L_CK, .- r~ r,  ylab = "L(d) - r", xlab = "d(m)")
```

### L-function with CSR - CCK

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
L_CK.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99)
L_CK.csr
```

```{r, fig.width=7.6, fig.height=5.5}
plot(L_CK.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

**Interpretation**:

Choa Chu Kang: L-function,isotropic edge correction; 99 CSR simulations; pointwise Î± = 0.02

The black curve is mostly **inside** the envelope across r within 795m, except one upside shape deviation around 60m. F function esitmates is mostly positive and within the pointwise envelope, so Choa Chu Kang shows no significant departure from CSR (only a slight clustering tendency).

### L-function - Tampines

The code chunk below calculates the L-function.

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
L_tm
plot(L_tm, .- r~ r,  ylab = "L(d) - r", xlab = "d(m)", xlim = c(0,1000))
```

### L-function with CSR - Tampines

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp,Lest, nsim = 99, nrank = 1)
L_tm.csr
```

```{r, fig.weight = 7, fig.height= 6.8}
plot(L_tm.csr, .- r~ r,  ylab = "L(d) - r", xlab = "d", xlim = c(0,1700))
```

**Interpretation**:

Tampines: L-function,isotropic edge correction; 99 CSR simulations; pointwise Î± = 0.02

The black line lies above the simulation envelope, indicating strong clustering at scales; in view of F showing large gaps, this likely reflects hotspot-driven inhomogeneity.
:::

## Analysing Spatial Point Process Using J-Function

There is also another test mentioned in the lecture videos called J-function `Jest()`, which is combination of G and F. J(r) = \[1 - G(r)\]/ \[1 - F(r)\]. J(r) \> 1 implies regluar, = 1 CSR, \< 1 cluster. When the observed line is below envelope suggests clustering, when it is over envelope suggests regular pattern.

Here we try out `Jest()` and test against CSR `envelope()`.

::: panel-tabset
### J-function - CCK

The code chunk below calculates the J-function.

```{r}
J_CK = Jest(childcare_ck_ppp, correction = "best")
J_CK
plot(J_CK)
```

### J-function with CSR - CCK

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
J_CK.csr <- envelope(childcare_ck_ppp, Jest, nsim = 999)
J_CK.csr
```

```{r, fig.width=7.6, fig.height=5.5}
plot(J_CK.csr, xlim = c(0,300))
```

**Interpretation**:

Choa Chu Kang: J-function, KM edge correction; 999 CSR simulations; pointwise Î± = 0.002

The black curve is mostly **inside** the envelope but it is hard to interpret.

### J-function - Tampines

The code chunk below calculates the J-function.

```{r}
J_tm = Jest(childcare_tm_ppp, correction = "best")
J_tm
plot(J_tm)
```

### J-function with CSR - Tampines

The code chunk below test Complete Spatial Randomness.

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
J_tm.csr <- envelope(childcare_tm_ppp, Jest, nsim = 999, nrank = 1)
J_tm.csr
```

```{r, fig.weight = 7, fig.height= 6.8}
plot(J_tm.csr)
```

**Interpretation**:

Tampines: J-function, KM edge correction; 999 CSR simulations; pointwise Î± = 0.002

It is hard to interpret.
:::

## Summary

Through multiple tests (GFKL functions) against complete spatial randomness, we can conclude the childcare centres in Choa Chu Kang are highly like randomly distributed whereas the centres in Tampines are largely clustered.

## Reference

Kam, T. S. 2nd Order Spatial Point Patterns Analysis Methods. R for Geospatial Data Science and Analytics. https://r4gdsa.netlify.app/chap05
